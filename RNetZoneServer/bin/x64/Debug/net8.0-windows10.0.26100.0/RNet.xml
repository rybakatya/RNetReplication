<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RNet</name>
    </assembly>
    <members>
        <member name="T:RapidNet.Connections.Connection">
            <summary>
            Contains a managed pointer to the connection instance and a cached ID.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.ID">
            <summary>
            Returns a numeric id representing this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.BytesSent">
            <summary>
            returns the total number of bytes sent from this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.BytesReceived">
            <summary>
            returns the total number of bytes received on this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.LastReceiveTime">
            <summary>
            returns the last time a packet was received on this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.LastSendTime">
            <summary>
            returns the last time a packet  was sent on this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.LastRoundTripTime">
            <summary>
            returns the last known round trip time for this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.Mtu">
            <summary>
            returns the connections MTU;
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.PacketsSent">
            <summary>
            returns the total number of packets sent by this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.PacketsLost">
            <summary>
            returns the total number of packets received by this connection.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.Port">
            <summary>
            returns the port this connection is using.
            </summary>
        </member>
        <member name="P:RapidNet.Connections.Connection.IpAddress">
            <summary>
            returns this connections IPAddress as a NativeString
            <seealso cref="T:RapidNet.NativeString"/>
            </summary>
        </member>
        <member name="M:RapidNet.Connections.Connection.Equals(RapidNet.Connections.Connection)">
            <summary>
            returns true if this connection equals other connection.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Connections.Connection.GetHashCode">
            <summary>
            Used by Dictionary to determine if this connection is a key.>
            </summary>
            <returns cref="P:RapidNet.Connections.Connection.ID">id of the connection</returns>
        </member>
        <member name="M:RapidNet.Connections.Connection.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Connections.Connection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Extensions.RNetExtension">
            <summary>
            Base class used to implement extensions for RNet.
            </summary>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.#ctor(RapidNet.WorkerCollection)">
             <summary>
            
             </summary>
             <param name="workers"></param>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.OnSocketConnect(RapidNet.Extensions.ThreadType,RapidNet.Connections.Connection)">
            <summary>
            called by RNet automatically after a client has connected.
            </summary>
            <param name="threadType">The thread that this method was called on.</param>
            <param name="connection">The connection that has connected.</param>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.OnSocketDisconnect(RapidNet.Extensions.ThreadType,RapidNet.Connections.Connection)">
            <summary>
            called by RNet automatically after a client has disconnected.
            </summary>
            <param name="threadType">The thread that this method was called on.</param>
            <param name="connection">The connection that has disconnected.</param>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.OnSocketTimeout(RapidNet.Extensions.ThreadType,RapidNet.Connections.Connection)">
            <summary>
            called by RNet automatically after a client has timedout.
            </summary>
            <param name="threadType">The thread that this method was called on.</param>
            <param name="connection">The connection that has timedout.</param>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.OnSocketReceive(RapidNet.Extensions.ThreadType,RapidNet.Connections.Connection,System.UInt16,System.IntPtr)">
            <summary>
            Called by RNet automatically after a message  has been received.
            </summary>
            <param name="threadType">the thread that this method is being called from</param>
            <param name="sender"></param>
            <param name="messageID"></param>
            <param name="messageData"></param>
            <returns>returns true if you want to prevent this event being called in subsequent threads.</returns>
        </member>
        <member name="M:RapidNet.Extensions.RNetExtension.OnThreadEventReceived(RapidNet.Extensions.ThreadType,System.UInt16,System.IntPtr)">
            <summary>
            Called by RNet automatically after a thread event was received. 
            </summary>
            <param name="threadType"></param>
            <param name="id"></param>
            <param name="eventData"></param>
        </member>
        <member name="T:RapidNet.Extensions.ThreadType">
            <summary>
            Enum used to tag  what thread is sending data.
            </summary>
        </member>
        <member name="F:RapidNet.Extensions.ThreadType.Game">
            <summary>
            The game thread.
            </summary>
        </member>
        <member name="F:RapidNet.Extensions.ThreadType.Logic">
            <summary>
            The logic thread.
            </summary>
        </member>
        <member name="F:RapidNet.Extensions.ThreadType.Network">
            <summary>
            The network thread.
            </summary>
        </member>
        <member name="T:RapidNet.Logging.Logger">
            <summary>
            Used to log strings of text to the console window.
            </summary>
        </member>
        <member name="M:RapidNet.Logging.Logger.Log(RapidNet.Logging.LogLevel,System.String)">
            <summary>
            Logs a string of text to the console.
            </summary>
            <param name="level"></param>
            <param name="msg"></param>
        </member>
        <member name="T:RapidNet.Logging.LogLevel">
            <summary>
            Used to determine the severity level when logging text.
            </summary>
        </member>
        <member name="F:RapidNet.Logging.LogLevel.Info">
            <summary>
            just used to  display information. White text.
            </summary>
        </member>
        <member name="F:RapidNet.Logging.LogLevel.Warning">
            <summary>
            used  to display a warning. Yellow text.
            </summary>
        </member>
        <member name="F:RapidNet.Logging.LogLevel.Error">
            <summary>
            displays an error. Red text.
            </summary>
        </member>
        <member name="F:RapidNet.Logging.LogLevel.Exception">
            <summary>
            displays an exception. Red text.
            </summary>
        </member>
        <member name="T:RapidNet.Memory.MemoryAllocator">
            <summary>
            Can inherit from MemoryAllocator class to create your very own high performance allocator.
            <seealso cref="T:RapidNet.Memory.RNetAllocator"/>
            </summary>
        </member>
        <member name="M:RapidNet.Memory.MemoryAllocator.Malloc(System.Int32)">
            <summary>
            Allocates native memory of size.
            </summary>
            <param name="size">How large of a slice of memory to allocate.</param>
            <returns>a pointer to the memory allocated.</returns>
        </member>
        <member name="M:RapidNet.Memory.MemoryAllocator.Free(System.IntPtr)">
            <summary>
            Frees native memory.
            </summary>
            <param name="ptr">A pointer to the memory you would like to free.</param>
        </member>
        <member name="T:RapidNet.Memory.MemoryHelper">
            <summary>
            Utility class used to make working with pointers a little  easier, also a wrapper for the allocator you call in RNet.Init
            <seealso cref="M:RapidNet.RNet.Init(System.Action,RapidNet.Memory.MemoryAllocator)"/>
            </summary>
        </member>
        <member name="M:RapidNet.Memory.MemoryHelper.Write``1(``0)">
            <summary>
            Allocates a block of memory equal to the size of T, then stores <paramref name="value"/> into  the block.
            </summary>
            <param name="value">an unmanaged value type to  store to the memory allocated.</param>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Memory.MemoryHelper.Read``1(System.IntPtr)">
            <summary>
            Reads a pointer returning <typeparamref name="T"/>
            </summary>
            <typeparam name="T">An unmanaged type to read out of the pointer.</typeparam>
            <param name="ptr">The pointer to the memory holding the value.</param>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Memory.MemoryHelper.Alloc(System.Int32)">
            <summary>
            Allocates native memory of size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Memory.MemoryHelper.Free(System.IntPtr)">
            <summary>
            Frees memory allocated at pointer.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:RapidNet.NativeString.#ctor(System.String)">
            <summary>
            Creates a new instance of the NativeString type allocated 2 * string.Length bytes of memory which must be manually freed.
            </summary>
            <param name="str">The managed string to store into the the NativeString</param>
        </member>
        <member name="M:RapidNet.NativeString.ToString">
            <summary>
            returns a managed string  from the native string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidNet.NativeString.Free">
            <summary>
            Frees the native memory used for this NativeString.
            </summary>
        </member>
        <member name="T:RapidNet.RNet">
            <summary>
            Static class used to initialize and manage RNet. Everything in this class is safe in all threads at all times.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.BytesSent">
            <summary>
            Returns the number of bytes sent from this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.BytesReceived">
            <summary>
            Returns the number of bytes received on this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.LastReceiveTime">
            <summary>
            Returns the time that a packet was last received on this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.LastSendTime">
            <summary>
            Returns the time that a packet was last sent on this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.LastRoundTripTime">
            <summary>
            Returns the Round Trip Time for the connection on this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.Mtu">
            <summary>
            Returns this machines MTU
            </summary>
        </member>
        <member name="P:RapidNet.RNet.PacketsSent">
            <summary>
            Returns the number of packets sent by this machine.
            </summary>
        </member>
        <member name="P:RapidNet.RNet.PacketsLost">
            <summary>
            Returns the number of packets lost by this machine.
            </summary>
        </member>
        <member name="M:RapidNet.RNet.Init(System.Action,RapidNet.Memory.MemoryAllocator)">
            <summary>
            Initializes RNet,  must be called and initAction  must be invoked before any other methods in RNet are called.
            </summary>
            <param name="initAction">The method invoked when RNet is finished initializing.</param>
            <param name="alloc">Optional parameter used to pass a custom memory allocator to be used by RNet.</param>
        </member>
        <member name="M:RapidNet.RNet.TearDown">
            <summary>
            Deinitializes the network and logic thread.
            </summary>
        </member>
        <member name="M:RapidNet.RNet.RegisterExtension``1">
            <summary>
            Registers an RNet extension to be loaded, needs to be called prior to RNet.InitializeServer or RNet.InitializeClient.
            </summary>
            <typeparam name="T">The type inheriting from RNetExtension</typeparam>
        </member>
        <member name="M:RapidNet.RNet.Tick">
            <summary>
            Called once per frame to keep main thread events flowing from logic thread.
            </summary>
        </member>
        <member name="M:RapidNet.RNet.InitializeServer(System.String,System.UInt16,System.Byte,System.UInt16)">
            <summary>
            Initializes a server to receive connections.
            </summary>
            <param name="ip">The ip address the server is bound to.</param>
            <param name="port">The port used to establish socket connections</param>
            <param name="maxChannels">
                Maximum amount of channels used by this connection, must match number called in RNet.InitializeClient
            </param>
            <param name="maxConnections"></param>
        </member>
        <member name="M:RapidNet.RNet.Disconnect(RapidNet.Connections.Connection)">
            <summary>
            Disconnects the passed connection from the server.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RapidNet.RNet.Disconnect">
            <summary>
            Disconnects this machine from everything.
            </summary>
        </member>
        <member name="M:RapidNet.RNet.Connect(System.String,System.UInt16)">
            <summary>
            Connects this socket to a server. Can be called from clients or servers.
            </summary>
            <param name="ip">IpAddress of the server to connect to.</param>
            <param name="port">Port of the server to connect to.</param>
        </member>
        <member name="M:RapidNet.RNet.SendUnreliable``1(RapidNet.Connections.Connection,System.UInt16,System.Byte,``0)">
            <summary>
            Sends an unreliable message to the target connection.
            </summary>
            <param name="target">Target connection to send the message to.</param>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="channel">Channel to send the message on.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.SendUnreliable``1(RapidNet.Connections.Connection,System.UInt16,``0)">
            <summary>
            Sends an unreliable message to the target connection.
            </summary>
            <param name="target">Target connection to send the message to.</param>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.SendReliable``1(RapidNet.Connections.Connection,System.UInt16,System.Byte,``0)">
            <summary>
            Sends a reliable message to the target connection.
            </summary>
            <param name="target">Target connection to send the message to.</param>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="channel">Channel to send the message on.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.SendReliable``1(RapidNet.Connections.Connection,System.UInt16,``0)">
            <summary>
            Sends an unreliable message to the target connection.
            </summary>
            <param name="target">Target connection to send the message to.</param>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.BroadcastReliable``1(System.UInt16,System.Byte,``0)">
            <summary>
            Broadcasts a reliable message to every connection.
            </summary>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="channel">Channel to send the message on.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.BroadcastReliable``1(System.UInt16,``0)">
            <summary>
            Broadcasts a reliable message to every connection.
            </summary>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.BroadcastUnreliable``1(System.UInt16,System.Byte,``0)">
            <summary>
            Broadcasts an unreliable message to every connection.
            </summary>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="channel">Channel to send the message on.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.BroadcastUnreliable``1(System.UInt16,``0)">
            <summary>
            Broadcasts an unreliable message to every connection.
            </summary>
            <param name="messageID">MessageID of the messasge being sent.</param>
            <param name="message">MessageObject to send.</param>
        </member>
        <member name="M:RapidNet.RNet.RegisterReceiveEvent(RapidNet.Workers.OnSocketReceiveDelegate,System.Action{RapidNet.Connections.Connection,System.UInt16,System.IntPtr})">
            <summary>
            Registers methods to be invoked after a packet has been deserialized into a network message
            </summary>
            <param name="logicReceiveAction">the method to be invoked on the logic thread.</param>
            <param name="gameReceiveAction">the method to be invoked on the game thread.</param>
        </member>
        <member name="M:RapidNet.RNet.UnRegisterReceiveEvent(RapidNet.Workers.OnSocketReceiveDelegate,System.Action{RapidNet.Connections.Connection,System.UInt16,System.IntPtr})">
            <summary>
            Unregisters receive methods.
            </summary>
            <param name="logicReceiveAction">the logic method to unregister.</param>
            <param name="gameReceiveAction">the game method to unregister.</param>
        </member>
        <member name="M:RapidNet.RNet.RegisterOnSocketConnectEvent(RapidNet.Workers.OnSocketConnectDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Registers methods to be invoked  after  an incoming connection has been established.
            </summary>
            <param name="socketConnectLogicAction">the method invoked on the logic thread after a socket connects.</param>
            <param name="socketConnectGameAction">the method invoked on the game thread after a socket  connects.</param>
        </member>
        <member name="M:RapidNet.RNet.UnRegisterOnSocketConnectEvent(RapidNet.Workers.OnSocketConnectDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Unregisters methods for socket connect event.
            </summary>
            <param name="socketConnectLogicAction">the logic method to unregister.</param>
            <param name="socketConnectGameAction">the game method to unregister.</param>
        </member>
        <member name="M:RapidNet.RNet.RegisterOnSocketDisconnectEvent(RapidNet.Workers.OnSocketDisconnectDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Registers methods to be invoked after a socket connection has ended gracefully.
            </summary>
            <param name="socketDisconnectLogicAction">the method to invoke on the logic thread.</param>
            <param name="socketDisconnectGameAction">the method to  invoke on the game thread.</param>
        </member>
        <member name="M:RapidNet.RNet.UnRegisterOnSocketDisconnectEvent(RapidNet.Workers.OnSocketDisconnectDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Unregisters socket disconnect methods
            </summary>
            <param name="socketDisconnectLogicAction">the logic method to unregister</param>
            <param name="socketDisconnectGameAction">the game method to unregister</param>
        </member>
        <member name="M:RapidNet.RNet.RegisterOnSocketTimeoutEvent(RapidNet.Workers.OnSocketTimeoutDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Registers methods to be invoked after a socket connection has not ended gracefully.
            </summary>
            <param name="socketTimeoutLogicAction">the method to invoke on the logic thread.</param>
            <param name="socketTimeoutGameAction">the method to  invoke on the game thread.</param>
        </member>
        <member name="M:RapidNet.RNet.UnregisterOnSocketTimeoutEvent(RapidNet.Workers.OnSocketTimeoutDelegate,System.Action{RapidNet.Connections.Connection})">
            <summary>
            Unregisters socket timeout methods
            </summary>
            <param name="socketTimeoutLogicAction">the logic method to unregister</param>
            <param name="socketTimeoutGameAction">the game method to unregister</param>
        </member>
        <member name="T:RapidNet.Serialization.BitBuffer">
            <summary>
            Class used to write values to a buffer that can be converted to a span  of bytes to send over the network. Can also read data from a span of bytes.
            </summary>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.#ctor(System.Int32)">
            <summary>
            Creates a new buffer, each bucket of the buffer is 4 bytes meaning passing 375 as the numberOfBuckets will create a buffer that can hold 1500 bytes of data.
            </summary>
            <param name="numberOfBuckets">Number of buffer buckets</param>
        </member>
        <member name="P:RapidNet.Serialization.BitBuffer.Length">
            <summary>
            Returns the length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:RapidNet.Serialization.BitBuffer.IsFinished">
            <summary>
            returns true if buffer is finished reading or writing.
            </summary>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.Clear">
            <summary>
            clears all data from the buffer.
            </summary>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.Add(System.Int32,System.UInt32)">
            <summary>
            Adds raw bits to the buffer.
            </summary>
            <param name="numBits"></param>
            <param name="value"></param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.Read(System.Int32)">
            <summary>
            reads raw bits from the buffer.+
            </summary>
            <param name="numBits"></param>
            <returns>Value read from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.Peek(System.Int32)">
            <summary>
            Peeks raw bits from the buffer without advancing the read position.
            </summary>
            <param name="numBits"></param>
            <returns>Value peeked from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ToArray(System.Byte[])">
            <summary>
            Stores the data in the buffer to the provided array.
            </summary>
            <param name="data">array to store the buffer data into.</param>
            <returns>array length</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.FromArray(System.Byte[],System.Int32)">
            <summary>
            Creates a buffer of data from the provided array
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ToSpan(System.Span{System.Byte}@)">
            <summary>
            Stores the data in the buffer to the provided Span.
            </summary>
            <param name="data"></param>
            <returns>Length of the span.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.FromSpan(System.ReadOnlySpan{System.Byte}@,System.Int32)">
            <summary>
            Stores the data from the ReadOnlySpan into the buffer.
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddBool(System.Boolean)">
            <summary>
            Adds a bool to the buffer advancing the position by one byte.
            </summary>
            <param name="value">value to add to the buffer</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadBool">
            <summary>
            Reads a bool from the buffer advancing the position by one byte.
            </summary>
            <returns>value read from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekBool">
            <summary>
            Reads a bool from the buffer without advancing the position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddByte(System.Byte)">
            <summary>
            Adds a byte to the buffer advancing the position one byte.
            </summary>
            <param name="value">the value to add to the buffer</param>
            <returns>value peeked from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadByte">
            <summary>
            Reads a byte from the buffer advancing the position one byte.
            </summary>
            <returns>value read from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekByte">
            <summary>
            Reads a byte from the buffer without advancing the position.
            </summary>
            <returns>byte peeked from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddShort(System.Int16)">
            <summary>
            Adds a short to the buffer advancing the position two bytes.
            </summary>
            <param name="value">value to add to the buffer</param>
            <returns></returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadShort">
            <summary>
            Reads a short from the buffer advancing the position two bytes.
            </summary>
            <returns>the value read from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekShort">
            <summary>
            Reads a short from the buffer without advancing the position.
            </summary>
            <returns>the value peeked from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddUShort(System.UInt16)">
            <summary>
            Adds a ushort to the buffer advancing the position 2 bytes.
            </summary>
            <param name="value">The value to add to the buffer.</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadUShort">
            <summary>
            Reads a ushort from the buffer advancing  the position  2 bytes.
            </summary>
            <returns>the value read from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekUShort">
            <summary>
            Reads a  ushort from the buffer without advancing the position.
            </summary>
            <returns>the value peeked from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddInt(System.Int32)">
            <summary>
            Adds an int to the buffer advancing the position 4 bytes.
            </summary>
            <param name="value">the value to add to the buffer</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadInt">
            <summary>
            Reads an int from the buffer advancing the position  4 bytes.
            </summary>
            <returns>the value read from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekInt">
            <summary>
            Reads an int from the buffer without advancing the position.
            </summary>
            <returns>The value peeked from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddUInt(System.UInt32)">
            <summary>
            Adds a uint to the buffer advancing the position 4 bytes.
            </summary>
            <param name="value">The value to add to the buffer.</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadUInt">
            <summary>
            Reads a uint from the buffer advancing the position 4 bytes.
            </summary>
            <returns>the value read from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekUInt">
            <summary>
            Reads a uint from the buffer without advancing its position.
            </summary>
            <returns>The value peeked from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddLong(System.Int64)">
            <summary>
            Adds a long to the buffer advancing the position 8 bytes.
            </summary>
            <param name="value">the value to add to the buffer.</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadLong">
            <summary>
            Reads a long from the buffer advancing the position by 8 bytes.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekLong">
            <summary>
            Reads a long from the buffer without advancing the position.
            </summary>
            <returns>the value peeked from the buffer</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.AddULong(System.UInt64)">
            <summary>
            Adds a ulong to the buffer advancing the position 8 bytes.
            </summary>
            <param name="value">the value added to the buffer.</param>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.ReadULong">
            <summary>
            Reads a ulong from the buffer advancing the position 8 bytes.
            </summary>
            <returns>The value read from the buffer.</returns>
        </member>
        <member name="M:RapidNet.Serialization.BitBuffer.PeekULong">
            <summary>
            Reads a ULong from the buffer without advancing the position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Serialization.HalfPrecision">
            <summary>
            Helper class used to convert floats to ushorts before sending over the network to preserve bandwidth
            </summary>
        </member>
        <member name="M:RapidNet.Serialization.HalfPrecision.Quantize(System.Single)">
            <summary>
            Converts a float to a ushort
            </summary>
            <param name="value">float to convert</param>
            <returns>converted ushort</returns>
        </member>
        <member name="M:RapidNet.Serialization.HalfPrecision.Dequantize(System.UInt16)">
            <summary>
            Takes ushort returned by HalfPrecision.Quantize and returns the original float.
            </summary>
            <param name="value">Quantized Float</param>
            <returns>Dequantized Float</returns>
        </member>
        <member name="T:RapidNet.Serialization.IMessageObject">
            <summary>
            Interface that all NetworkMessage structs should implement.
            </summary>
        </member>
        <member name="T:RapidNet.Serialization.Serializer">
            <summary>
            Base class used by the logic thread for serialization
            </summary>
        </member>
        <member name="F:RapidNet.Serialization.Serializer.messageID">
            <summary>
            the message id that this serializer is serving
            </summary>
        </member>
        <member name="M:RapidNet.Serialization.Serializer.Serialize(RapidNet.Serialization.BitBuffer,System.IntPtr)">
            <summary>
            Called on the logic thread when an outoing network message is serialized
            </summary>
            <param name="buffer">The allocated buffer to write to.</param>
            <param name="data">The IMessageObject that was passed to RNet.SendMessage pointer.</param>
        </member>
        <member name="M:RapidNet.Serialization.Serializer.Deserialize(RapidNet.Serialization.BitBuffer)">
            <summary>
            Called on the logic thread when an incoming network message is deserialized.
            </summary>
            <param name="buffer">the buffer to read from</param>
            <returns>a pointer to a struct holding the deserialized data, must implement IMessageObject</returns>
        </member>
        <member name="T:RapidNet.Serialization.SerializerAttribute">
            <summary>
            Attribute used on serializers to link them with specific message IDS.
            </summary>
        </member>
        <member name="F:RapidNet.Serialization.SerializerAttribute.messageID">
             <summary>
            
             </summary>
        </member>
        <member name="M:RapidNet.Serialization.SerializerAttribute.#ctor(System.UInt16)">
             <summary>
            
             </summary>
        </member>
        <member name="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1">
            <summary>
            A common interface that represents the consumer side of a concurrent queue.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.IsMultiConsumer">
            <summary>
            Gets a value that indicates whether the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/> can be used by multiple threads.
            </summary>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/> is empty.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to add the object at the end of the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/>.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the beginning of the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/>
            without removing it.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.ToArray">
            <summary>
            Copies the elements stored in the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/> to a new array.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.IConsumerQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:RapidNet.Threading.LocklessQueue.IConsumerQueue`1"/> elements to an existing one-dimensional <see
            cref="T:System.Array">Array</see>, starting at the specified array index.
            </summary>
        </member>
        <member name="T:RapidNet.Threading.LocklessQueue.IProducerConsumerQueue`1">
            <summary>
            A common interface used for concurrent queues.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="T:RapidNet.Threading.LocklessQueue.IProducerQueue`1">
            <summary>
            A common interface that represents the producer side of a concurrent collection.
            </summary>
            <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.IProducerQueue`1.IsMultiProducer">
            <summary>
            Gets a value that indicates whether the <see cref="T:RapidNet.Threading.LocklessQueue.IProducerQueue`1"/> can be used by multiple threads.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.IProducerQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add the object at the end of the <see cref="T:RapidNet.Threading.LocklessQueue.IProducerQueue`1"/>.
            </summary>
        </member>
        <member name="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1">
            <summary>
            Represents a thread-safe first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
            <remarks>
            Can be used with multiple producer threads and one consumer thread.
            </remarks>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Capacity">
            <summary>
            Gets the capacity of this <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> class. Capacity will be set to a power of 2.
            </summary>
            <param name="capacity">The fixed-capacity of this <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/></param>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> class that contains elements copied
            from the specified collection.
            Capacity will be set to a power of 2.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            </param>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            This method is NOT thread-safe!
            </summary>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.MPSCQueue`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> is empty.
            Value becomes stale after more enqueue or dequeue operations.
            </summary>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            Value becomes stale after more enqueue or dequeue operations.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add the object at the end of the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            Returns false if the queue is full.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the object at the beginning of the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>.
            Returns false if the queue is empty.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the beginning of the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> without removing it.
            Returns false if the queue if empty.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.ToArray">
            <summary>
            Copies the elements stored in the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> to a new array.
            Consumer-Threadsafe
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/> elements to an existing <see cref="T:System.Array">Array</see>, starting at the specified array index.
            Consumer-Threadsafe
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the
            <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>. The <see cref="T:System.Array">Array</see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Enumerator">
            <summary>
            Defines an enumerator for <see cref="T:RapidNet.Threading.LocklessQueue.MPSCQueue`1"/>
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next position.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:RapidNet.Threading.LocklessQueue.MPSCQueue`1.Enumerator.Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.HashHelpers.GetFastModMultiplier(System.UInt32)">
            <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="M:RapidNet.Threading.LocklessQueue.HashHelpers.FastMod(System.UInt32,System.UInt32,System.UInt64)">
            <summary>Performs a mod operation using the multiplier pre-computed with <see cref="M:RapidNet.Threading.LocklessQueue.HashHelpers.GetFastModMultiplier(System.UInt32)"/>.</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="T:RapidNet.Threading.Worker">
            <summary>
            Base class for workers, are just classes you can enque events into.
            </summary>
        </member>
        <member name="M:RapidNet.Threading.Worker.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.Worker.Enqueue(System.UInt16)">
            <summary>
            Enqueues a event  into the queue. This is thread safe and can be called from any thread always.
            </summary>
            <param name="threadEventID">the event id for the event you're passing.</param>
        </member>
        <member name="M:RapidNet.Threading.Worker.Enqueue``1(System.UInt16,``0)">
            <summary>
            Enqueues a event  into the queue. This is thread safe and can be called from any thread always.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="threadEventID">the event id for the event you're passing.</param>
            <param name="data">the event data you're enqueue must be unmanaged</param>
        </member>
        <member name="M:RapidNet.Threading.Worker.Consume">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.Worker.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="T:RapidNet.Threading.WorkerThread">
            <summary>
            A worker that is invoked on a seperate thread.
            </summary>
        </member>
        <member name="F:RapidNet.Threading.WorkerThread.thread">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.GetThreadID">
            <summary>
            Gets the workers thread id.
            </summary>
            <returns>workers thread id.</returns>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.Tick">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Threading.WorkerThread.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="T:RapidNet.Threading.WorkerThreadEventHeader">
            <summary>
            Structure used to wrap thread messages into unmanaged blittable data.
            </summary>
        </member>
        <member name="F:RapidNet.Threading.WorkerThreadEventHeader.eventID">
            <summary>
            the  thread event ID
            </summary>
        </member>
        <member name="F:RapidNet.Threading.WorkerThreadEventHeader.data">
            <summary>
            a pointer to unmanaged data to pass to the other thread.
            </summary>
        </member>
        <member name="T:RapidNet.WorkerCollection">
            <summary>
            Holds references to the game, logic, and network  threads.
            </summary>
        </member>
        <member name="F:RapidNet.WorkerCollection.gameWorker">
            <summary>
            reference to game worker thread.
            </summary>
        </member>
        <member name="F:RapidNet.WorkerCollection.socketWorker">
            <summary>
            refrence to network  worker thread.
            </summary>
        </member>
        <member name="F:RapidNet.WorkerCollection.logicWorker">
            <summary>
            reference to logic worker  thread.
            </summary>
        </member>
        <member name="T:RapidNet.Workers.GameWorker">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.GameWorker.#ctor(System.Action,RapidNet.WorkerCollection,RapidNet.Extensions.ExtensionManager)">
            
        </member>
        <member name="M:RapidNet.Workers.GameWorker.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="T:RapidNet.Workers.OnSocketConnectDelegate">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Workers.OnSocketDisconnectDelegate">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Workers.OnSocketTimeoutDelegate">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Workers.OnSocketReceiveDelegate">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="messageID"></param>
            <param name="messageData"></param>
            <returns></returns>
        </member>
        <member name="T:RapidNet.Workers.LogicWorkerThread">
            <summary>
            Used internally by RNet to manage the  logic thread.
            </summary>
            
        </member>
        <member name="F:RapidNet.Workers.LogicWorkerThread.onLogicInit">
            <summary>
            Called from the logic thread before the update loop begins.
            </summary>
        </member>
        <member name="M:RapidNet.Workers.LogicWorkerThread.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.LogicWorkerThread.Tick">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.LogicWorkerThread.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="T:RapidNet.Workers.SocketWorkerThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.SocketWorkerThread.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.SocketWorkerThread.Tick">
            <summary>
            
            </summary>
        </member>
        <member name="M:RapidNet.Workers.SocketWorkerThread.Destroy">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
